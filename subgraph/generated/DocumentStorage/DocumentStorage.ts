// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class DocumentAdded extends ethereum.Event {
  get params(): DocumentAdded__Params {
    return new DocumentAdded__Params(this);
  }
}

export class DocumentAdded__Params {
  _event: DocumentAdded;

  constructor(event: DocumentAdded) {
    this._event = event;
  }

  get docId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class DocumentStorage__documentsResult {
  value0: string;
  value1: string;
  value2: string;
  value3: string;
  value4: string;
  value5: BigInt;
  value6: Address;
  value7: boolean;

  constructor(
    value0: string,
    value1: string,
    value2: string,
    value3: string,
    value4: string,
    value5: BigInt,
    value6: Address,
    value7: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getDescription(): string {
    return this.value1;
  }

  getDocType(): string {
    return this.value2;
  }

  getCategory(): string {
    return this.value3;
  }

  getFileCID(): string {
    return this.value4;
  }

  getCreatedAt(): BigInt {
    return this.value5;
  }

  getOwner(): Address {
    return this.value6;
  }

  getExists(): boolean {
    return this.value7;
  }
}

export class DocumentStorage__getDocumentResult {
  value0: string;
  value1: string;
  value2: string;
  value3: string;
  value4: string;
  value5: BigInt;
  value6: Address;

  constructor(
    value0: string,
    value1: string,
    value2: string,
    value3: string,
    value4: string,
    value5: BigInt,
    value6: Address,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getDescription(): string {
    return this.value1;
  }

  getDocType(): string {
    return this.value2;
  }

  getCategory(): string {
    return this.value3;
  }

  getFileCID(): string {
    return this.value4;
  }

  getCreatedAt(): BigInt {
    return this.value5;
  }

  getOwner(): Address {
    return this.value6;
  }
}

export class DocumentStorage extends ethereum.SmartContract {
  static bind(address: Address): DocumentStorage {
    return new DocumentStorage("DocumentStorage", address);
  }

  documents(param0: Bytes): DocumentStorage__documentsResult {
    let result = super.call(
      "documents",
      "documents(bytes32):(string,string,string,string,string,uint256,address,bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new DocumentStorage__documentsResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString(),
      result[4].toString(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toBoolean(),
    );
  }

  try_documents(
    param0: Bytes,
  ): ethereum.CallResult<DocumentStorage__documentsResult> {
    let result = super.tryCall(
      "documents",
      "documents(bytes32):(string,string,string,string,string,uint256,address,bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DocumentStorage__documentsResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString(),
        value[4].toString(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toBoolean(),
      ),
    );
  }

  getDocument(_docId: Bytes): DocumentStorage__getDocumentResult {
    let result = super.call(
      "getDocument",
      "getDocument(bytes32):(string,string,string,string,string,uint256,address)",
      [ethereum.Value.fromFixedBytes(_docId)],
    );

    return new DocumentStorage__getDocumentResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString(),
      result[4].toString(),
      result[5].toBigInt(),
      result[6].toAddress(),
    );
  }

  try_getDocument(
    _docId: Bytes,
  ): ethereum.CallResult<DocumentStorage__getDocumentResult> {
    let result = super.tryCall(
      "getDocument",
      "getDocument(bytes32):(string,string,string,string,string,uint256,address)",
      [ethereum.Value.fromFixedBytes(_docId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DocumentStorage__getDocumentResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString(),
        value[4].toString(),
        value[5].toBigInt(),
        value[6].toAddress(),
      ),
    );
  }
}

export class AddDocumentCall extends ethereum.Call {
  get inputs(): AddDocumentCall__Inputs {
    return new AddDocumentCall__Inputs(this);
  }

  get outputs(): AddDocumentCall__Outputs {
    return new AddDocumentCall__Outputs(this);
  }
}

export class AddDocumentCall__Inputs {
  _call: AddDocumentCall;

  constructor(call: AddDocumentCall) {
    this._call = call;
  }

  get _docId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _docType(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _category(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _fileCID(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class AddDocumentCall__Outputs {
  _call: AddDocumentCall;

  constructor(call: AddDocumentCall) {
    this._call = call;
  }
}
